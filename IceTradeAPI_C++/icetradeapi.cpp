// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "icetradeapi.h"

/////////////////////////////////////////////////////////////////////////////
// CICETRADEAPI

IMPLEMENT_DYNCREATE(CICETRADEAPI, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CICETRADEAPI properties

CString CICETRADEAPI::GetOrdSubPrefix()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CICETRADEAPI::SetOrdSubPrefix(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CICETRADEAPI::GetQueryServerAddr()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CICETRADEAPI::SetQueryServerAddr(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CICETRADEAPI::GetQueryProxyAddr()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CICETRADEAPI::SetQueryProxyAddr(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

long CICETRADEAPI::GetQueryProxyPort()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CICETRADEAPI::SetQueryProxyPort(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

BOOL CICETRADEAPI::GetNeedCA()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CICETRADEAPI::SetNeedCA(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

CString CICETRADEAPI::GetCAPath()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CICETRADEAPI::SetCAPath(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

CString CICETRADEAPI::GetCAPassword()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CICETRADEAPI::SetCAPassword(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CString CICETRADEAPI::GetOBOrdSubPrefix()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CICETRADEAPI::SetOBOrdSubPrefix(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

long CICETRADEAPI::GetCAType()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CICETRADEAPI::SetCAType(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CICETRADEAPI operations

long CICETRADEAPI::GetConnectStatus()
{
	long result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CICETRADEAPI::Login(long nLoginType, LPCTSTR strLoginURL, LPCTSTR strServerAddress, long nServerPort, LPCTSTR strProxyAddress, long nProxyPort, LPCTSTR strCompany, LPCTSTR strProduct, LPCTSTR strRocID, LPCTSTR strBranchID, LPCTSTR strCustID, 
		LPCTSTR strPassword, long nEncodeType)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nLoginType, strLoginURL, strServerAddress, nServerPort, strProxyAddress, nProxyPort, strCompany, strProduct, strRocID, strBranchID, strCustID, strPassword, nEncodeType);
	return result;
}

long CICETRADEAPI::Logout()
{
	long result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CICETRADEAPI::GetValueHigh(long nDataType, long nDataIndex, long nField)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDataType, nDataIndex, nField);
	return result;
}

long CICETRADEAPI::GetValueLow(long nDataType, long nDataIndex, long nField)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDataType, nDataIndex, nField);
	return result;
}

long CICETRADEAPI::GetDataCount(long nDataType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDataType);
	return result;
}

CString CICETRADEAPI::GetString(long nDataType, long nDataIndex, long nField)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nDataType, nDataIndex, nField);
	return result;
}

void CICETRADEAPI::SubscribeByAccount(long nAccountType, LPCTSTR branch, LPCTSTR account)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nAccountType, branch, account);
}

CString CICETRADEAPI::GetReportString(long nDataType, long nDataIndex, long nField)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nDataType, nDataIndex, nField);
	return result;
}

long CICETRADEAPI::GetReportValue(long nDataType, long nDataIndex, long nField)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDataType, nDataIndex, nField);
	return result;
}

long CICETRADEAPI::HttpQuery(LPCTSTR Type, LPCTSTR strXML)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Type, strXML);
	return result;
}

long CICETRADEAPI::PlaceFutOrder(VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pvData);
	return result;
}

long CICETRADEAPI::PlaceOptOrder(VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pvData);
	return result;
}

long CICETRADEAPI::PlaceOpt2Order(VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pvData);
	return result;
}

long CICETRADEAPI::PlaceStkOrder(VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pvData);
	return result;
}

long CICETRADEAPI::ReduceFutOrder(long nActType, VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, pvData);
	return result;
}

long CICETRADEAPI::ReduceOptOrder(long nActType, VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, pvData);
	return result;
}

long CICETRADEAPI::ReduceOpt2Order(long nActType, VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, pvData);
	return result;
}

long CICETRADEAPI::ReduceStkOrder(long nActType, VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, pvData);
	return result;
}

long CICETRADEAPI::PlaceOBFutOrder(VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pvData);
	return result;
}

long CICETRADEAPI::ReduceOBFutOrder(long nActType, VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, pvData);
	return result;
}

CString CICETRADEAPI::GetOBReportString(long nDataType, long nDataIndex, long nField)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nDataType, nDataIndex, nField);
	return result;
}

double CICETRADEAPI::GetOBReportValue(long nDataType, long nDataIndex, long nField)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		nDataType, nDataIndex, nField);
	return result;
}

long CICETRADEAPI::PlaceFutOrder2(const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&data);
	return result;
}

long CICETRADEAPI::PlaceOptOrder2(const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&data);
	return result;
}

long CICETRADEAPI::PlaceOpt2Order2(const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&data);
	return result;
}

long CICETRADEAPI::PlaceStkOrder2(const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&data);
	return result;
}

long CICETRADEAPI::PlaceOBFutOrder2(const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&data);
	return result;
}

long CICETRADEAPI::ReduceFutOrder2(long nActType, const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, &data);
	return result;
}

long CICETRADEAPI::ReduceOptOrder2(long nActType, const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, &data);
	return result;
}

long CICETRADEAPI::ReduceOpt2Order2(long nActType, const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, &data);
	return result;
}

long CICETRADEAPI::ReduceStkOrder2(long nActType, const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, &data);
	return result;
}

long CICETRADEAPI::ReduceOBFutOrder2(long nActType, const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, &data);
	return result;
}

long CICETRADEAPI::PlaceFut2Order(VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pvData);
	return result;
}

long CICETRADEAPI::PlaceFut2Order2(const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&data);
	return result;
}

long CICETRADEAPI::ReduceFut2Order(long nActType, VARIANT* pvData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, pvData);
	return result;
}

long CICETRADEAPI::ReduceFut2Order2(long nActType, const VARIANT& data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nActType, &data);
	return result;
}

CString CICETRADEAPI::ReturnCAPath()
{
	CString result;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CICETRADEAPI::ReturnCAPassword()
{
	CString result;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CICETRADEAPI::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
